# Run tests on different versions of node and rust, and on different OSes.
- op: replace
  path: /jobs/test/strategy/matrix
  value:
    rust_version: 
      - 1.56.0
      - stable
      - beta
    node_version:
      - 12
      - 14
      - 16
    system:
      - os: macos-10.15
        target: x86_64-apple-darwin
      - os: ubuntu-20.04
        target: x86_64-unknown-linux-gnu
      - os: windows-2019
        target: x86_64-pc-windows-msvc
    arch: 
      - x64
    include:
      # only node 15+ supports arm64 natively, so we only need to build 16 for now
      - system:
          os: [self-hosted, macOS, ARM64]
          target: aarch64-apple-darwin
        node_version: 16
        rust_version: 1.56.0
        arch: arm64
      - system:
          os: [self-hosted, macOS, ARM64]
          target: aarch64-apple-darwin
        node_version: 16
        rust_version: stable
        arch: arm64
      - system:
          os: [self-hosted, macOS, ARM64]
          target: aarch64-apple-darwin
        node_version: 16
        rust_version: beta
        arch: arm64
- op: add
  path: /jobs/test/strategy/fail-fast
  value: false
- op: replace
  path: /jobs/test/runs-on
  value: "${{ matrix.system.os }}"
- op: add
  path: /jobs/test/steps/1/with/architecture
  value: "${{ matrix.arch }}"

# These steps are lifted from the Rust CI workflow, cargo-test job.
- op: test
  path: /jobs/test/steps/2/name
  value: Install modules
- op: add
  path: /jobs/test/steps/2
  value:
    uses: actions-rs/toolchain@v1
    with:
      profile: minimal
      toolchain: ${{ matrix.rust_version }}
      override: true

# Modify the yarn actions.
- op: replace
  path: /jobs/test/steps/3/run
  value: yarn install --ignore-scripts
- op: add
  path: /jobs/test/steps/4
  value:
    name: Compile
    run: yarn run compile

# Only check coverage in one of the matrix job instances.
- op: test
  path: /jobs/test/steps/6/name
  value: Check test coverage
- op: add
  path: /jobs/test/steps/6/if
  value: ${{ contains(matrix.system.os, 'ubuntu') && matrix.node_version == '16' && matrix.rust_version == 'stable' && github.base_ref != '' }}

# Also run on musl. That means we need to run it in a Docker container. To do that, we copy the entire job and modify its
# strategy/matrix.
- op: copy
  from: /jobs/test
  path: /jobs/test-docker
- op: remove
  path: /jobs/test-docker/strategy/matrix/system
- op: remove
  path: /jobs/test-docker/strategy/matrix/include
- op: add
  path: /jobs/test-docker/strategy/matrix/os
  value:
    - ubuntu-20.04
- op: replace
  path: /jobs/test-docker/runs-on
  value: "${{ matrix.os }}"
- op: add
  path: /jobs/test-docker/container
  value:
    image: node:${{ matrix.node_version }}-alpine
# Set up some tools in the container that our other actions depend on.
- op: add
  path: /jobs/test-docker/steps/0
  value:
    run: apk add build-base git python3 wget
# hack to get dynlibs working with musl
# https://github.com/rust-lang/rust/pull/55163#issuecomment-436631090
- op: add
  path: /jobs/test-docker/steps/1
  value:
    run: echo RUSTFLAGS="-C target-feature=-crt-static" >> "${GITHUB_ENV}"
# We don't need to run setup-node inside of a node docker image.
- op: test
  path: /jobs/test-docker/steps/3/uses
  value: actions/setup-node@v3
- op: remove
  path: /jobs/test-docker/steps/3
# No need to check test coverage here, since we do it in the first matrix build.
- op: test
  path: /jobs/test-docker/steps/7/name
  value: Check test coverage
- op: remove
  path: /jobs/test-docker/steps/7

- op: test
  path: /jobs/test/steps/6/name
  value: Check test coverage
- op: replace
  path: /jobs/test/steps/6/with/afterSwitchCommand
  value: yarn install --ignore-scripts && yarn run compile
