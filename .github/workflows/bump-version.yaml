# DO NOT EDIT THIS FILE.
# Instead, edit the jsonpatch file (actually YAML) in .github/bump-version-patch.yaml
# For docs, see github-actions in the IronCoreLabs/depot repo.

name: Bump Version
'on':
  push:
    branches:
    - main
  workflow_dispatch:
    inputs:
      version:
        description: New semver release version.
env:
  COMMIT_PREFIX: 'bump-version: '
  MODE: prerelease
jobs:
  vars:
    runs-on: ubuntu-22.04
    outputs:
      commit-prefix: ${{ steps.echo.outputs.commit-prefix }}
    steps:
    - id: echo
      run: echo "commit-prefix=${{ env.COMMIT_PREFIX }}" >> "$GITHUB_OUTPUT"
  bump:
    needs:
    - vars
    runs-on: ubuntu-22.04
    if: '!contains(join(github.event.commits.*.message), needs.vars.outputs.commit-prefix)'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.WORKFLOW_PAT }}
    - name: Configure git
      run: 'git config --global user.email ops@ironcorelabs.com

        git config --global user.name "Leeroy Travis"

        '
    - name: Release
      id: release
      run: "set -x\nRETRIES=10\nTRY=0\nwhile [ $TRY -lt $RETRIES ] ; do\n  TRY=$(expr\
        \ $TRY + 1)\n  # Get the current version.\n  CURRENT=$(.github/bump-version.get.sh)\n\
        \  # Calculate next release version, and next dev version. Output to $GITHUB_OUTPUT,\
        \ which we then read.\n  .github/bump-version.bump.sh \"${{ env.MODE }}\"\
        \ \"${CURRENT}\" ${{ github.event.inputs.version }}\n  . $GITHUB_OUTPUT\n\
        \  # Set the in-tree version to the release version.\n  .github/bump-version.set.sh\
        \ \"${release}\"\n  git diff --cached\n  # GHA intermixes the stdout from\
        \ git diff with stderr from \"set -x\", so we pause to let it settle.\n  sleep\
        \ 1\n  git commit -m \"${COMMIT_PREFIX}Set release version ${release}\"\n\
        \  git tag \"${release}\"\n\n  # Bump to the next development version.\n \
        \ .github/bump-version.set.sh \"${bumped}\"\n  git diff --cached\n  sleep\
        \ 1\n  git commit -m \"${COMMIT_PREFIX}Bump to next development version ${bumped}\"\
        \n\n  # If we push the release commit and its tag in one step, we hit strange\
        \ race conditions where one client succeeds\n  # pushing the tag, and another\
        \ client succeeds pushing the commit. Instead, we push the commit first and\
        \ then the tag.\n  # That seems to cause the loser of the race to fail early.\n\
        \  if git push origin \"${{ github.ref }}\" && git push origin \"${release}\"\
        \ ; then\n    break\n  fi\n\n  # If the \"git push\" failed, then let's forget\
        \ our last two commits, re-pull the latest changes, and try again.\n  git\
        \ reset --hard HEAD~2\n  git tag -d \"${release}\"\n  git pull origin \"${{\
        \ github.ref }}\"\n  # Wait a little bit to let competing workflows finish\
        \ their business.\n  sleep 10\ndone\n"
    - name: Generate release text
      id: release-body
      run: "set -x\n# Get the most recent commit. Hopefully it was a PR merge.\nCOMMIT=$(jq\
        \ -r '.after' ${{ github.event_path }})\nif [ \"${COMMIT}\" = \"null\" ] ||\
        \ [ -z \"${COMMIT}\" ] ; then\n  exit 0\nfi\n# Get the most recent PRs; hopefully\
        \ ours is one of them.\ncurl -fSs -H \"Accept: application/vnd.github+json\"\
        \ \\\n  -H \"Authorization: Bearer ${{ secrets.WORKFLOW_PAT }}\" \\\n  https://api.github.com/repos/${{\
        \ github.repository }}/pulls?state=all\\&base=${{ github.ref }}\\&sort=updated\\\
        &direction=desc > /tmp/prs.json\n# Find a PR that resulted in our commit.\n\
        PR=$(jq -r \".[] | select(.merge_commit_sha == \\\"${COMMIT}\\\") | .number\"\
        \ /tmp/prs.json)\nif [ \"${PR}\" = \"null\" ] || [ -z \"${PR}\" ] ; then\n\
        \  exit 0\nfi\n# Build the string we'll use as the description of the release.\n\
        echo \"body=latest_pr:${PR}\" >> \"$GITHUB_OUTPUT\"\n"
    - name: Create prerelease
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.WORKFLOW_PAT }}
        prerelease: true
        tag: ${{ steps.release.outputs.release }}
        body: ${{ steps.release-body.outputs.body }}
