# DO NOT EDIT THIS FILE.
# Instead, edit the jsonpatch file (actually YAML) in .github/bump-version-patch.yaml
# For docs, see github-actions in the IronCoreLabs/depot repo.

name: Bump Version
'on':
  push:
    branches:
    - main
  workflow_dispatch:
    inputs:
      version:
        description: New semver release version.
env:
  COMMIT_PREFIX: 'bump-version: '
  MODE: prerelease
jobs:
  vars:
    runs-on: ubuntu-22.04
    outputs:
      commit-prefix: ${{ steps.echo.outputs.commit-prefix }}
    steps:
    - id: echo
      run: echo "commit-prefix=${{ env.COMMIT_PREFIX }}" >> "$GITHUB_OUTPUT"
  bump:
    needs:
    - vars
    runs-on: ubuntu-22.04
    if: '!contains(join(github.event.commits.*.message), needs.vars.outputs.commit-prefix)'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.WORKFLOW_PAT }}
    - name: Configure git
      run: 'git config --global user.email ops@ironcorelabs.com

        git config --global user.name "Leeroy Travis"

        '
    - name: Get version
      id: current
      run: echo "version=$(.github/bump-version.get.sh)" >> "$GITHUB_OUTPUT"
    - name: Compute versions
      id: versions
      run: .github/bump-version.bump.sh "${{ env.MODE }}" "${{ steps.current.outputs.version
        }}" ${{ github.event.inputs.version }}
    - name: Set release version
      run: '.github/bump-version.set.sh "${{ steps.versions.outputs.release }}"

        git diff --cached

        '
    - name: Commit release
      run: 'git commit -m "${COMMIT_PREFIX}Set release version ${{ steps.versions.outputs.release
        }}"

        '
    - name: Tag release
      run: 'git tag "${{ steps.versions.outputs.release }}"

        '
    - name: Push release tag
      run: 'git push origin "${{ github.ref }}"

        git push origin "${{ steps.versions.outputs.release }}"

        '
    - name: Generate release text
      id: release-body
      run: "set -x\n# Get the most recent commit. Hopefully it was a PR merge.\nCOMMIT=$(jq\
        \ -r '.after' ${{ github.event_path }})\nif [ \"${COMMIT}\" = \"null\" ] ||\
        \ [ -z \"${COMMIT}\" ] ; then\n  exit 0\nfi\n# Get the most recent PRs; hopefully\
        \ ours is one of them.\ncurl -fSs -H \"Accept: application/vnd.github+json\"\
        \ \\\n  -H \"Authorization: Bearer ${{ secrets.WORKFLOW_PAT }}\" \\\n  https://api.github.com/repos/${{\
        \ github.repository }}/pulls?state=all\\&base=${{ github.ref }}\\&sort=updated\\\
        &direction=desc > /tmp/prs.json\n# Find a PR that resulted in our commit.\n\
        PR=$(jq -r \".[] | select(.merge_commit_sha == \\\"${COMMIT}\\\") | .number\"\
        \ /tmp/prs.json)\nif [ \"${PR}\" = \"null\" ] || [ -z \"${PR}\" ] ; then\n\
        \  exit 0\nfi\n# Build the string we'll use as the description of the release.\n\
        echo \"body=latest_pr:${PR}\" >> \"$GITHUB_OUTPUT\"\n"
    - name: Create prerelease
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.WORKFLOW_PAT }}
        prerelease: true
        tag: ${{ steps.versions.outputs.release }}
        body: ${{ steps.release-body.outputs.body }}
    - name: Set development version
      run: '.github/bump-version.set.sh "${{ steps.versions.outputs.bumped }}"

        git diff --cached

        '
    - name: Commit and push development version
      run: 'git commit -m "${COMMIT_PREFIX}Bump to next development version ${{ steps.versions.outputs.bumped
        }}"

        git push origin main

        '
