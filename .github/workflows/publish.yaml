# Creates and publishes assets for a new release.
# To manually trigger this workflow, create a release in the GitHub UI.

name: Publish

'on':
  # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#release
  release:
    types:
      - created

env:
  # hack to get dynlibs working with musl
  # https://github.com/rust-lang/rust/pull/55163#issuecomment-436631090
  RUSTFLAGS: -C target-feature=-crt-static

jobs:
  publish-github:
    runs-on: ${{ matrix.system.os }}
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - 12
          - 14
          - 16
        system:
          - os: macos-10.15
            target: x86_64-apple-darwin
          - os: [self-hosted, macOS, ARM64]
            target: aarch64-apple-darwin
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: windows-2019
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: c-hive/gha-yarn-cache@v1
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node_version }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.system.target }}
          override: true
      - name: Install modules
        run: yarn install --ignore-scripts
      - name: Build
        id: build
        # Use bash, even on Windows.
        shell: bash
        env:
          PRE_GYP_PLATFORM: ${{ matrix.system.pre_gyp_platform }}
          PRE_GYP_ARCH: ${{ matrix.system.pre_gyp_arch }}
          CARGO_BUILD_TARGET: ${{ matrix.system.target }}
        run: |
          node publish.js
          cd bin-package
          echo "::set-output name=asset::$(echo *.tar.gz)"
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: bin-package/${{ steps.build.outputs.asset }}
          asset_name: ${{ steps.build.outputs.asset }}
          asset_content_type: application/gzip

  publish-github-docker:
    runs-on: ubuntu-20.04
    container:
      image: node:${{ matrix.node_version }}-alpine
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - '12'
          - '14'
          - '16'
    steps:
      - run: apk add build-base git python3 wget
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: c-hive/gha-yarn-cache@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install modules
        run: yarn install --ignore-scripts
      - name: Build
        id: build
        run: |
          node publish.js
          cd bin-package
          echo "::set-output name=asset::$(echo *.tar.gz)"
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: bin-package/${{ steps.build.outputs.asset }}
          asset_name: ${{ steps.build.outputs.asset }}
          asset_content_type: application/gzip

  publish-npm:
    needs:
      - publish-github
      - publish-github-docker
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: c-hive/gha-yarn-cache@v1
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: 14
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install modules
        run: yarn install --ignore-scripts
      - run: npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM release
        run: |
          set -x
          # If it's not a simple 1.2.3 version, then it's a prerelease of some kind.
          if ! [[ ${{ github.event.release.tag_name }} =~ ^[0-9.]*$ ]] ; then
            PRE="--prerelease"
          fi
          node publish.js --publish "${PRE}"
      - name: Finalize GitHub release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          prerelease: false
          allowUpdates: true
          tag: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
